#!/bin/sh
# Packaged by Ronny Schmatzler - schmatzler@hirnschwund.net
# Contains gstreamer 1.x backports and sqlite 3.8.6.1
#
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
# Exit on most errors
set -e

# Set variables:
CWD=`pwd`
OUTPUT=${OUTPUT:-$CWD}
PKGNAME=banshee
TMP=${TMP:-/tmp/txz/banshee}
PKG=$TMP/package
VERSION=${VERSION:-2.6.2}
ARCH=${ARCH:-x86_64}
BUILD=${BUILD:-12}
TAG=${TAG:-_banpack}

# Set compiling FLAGS
if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"; SLKLDFLAGS=""; LIBDIRSUFFIX=""; CHOST="i486"
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"; SLKLDFLAGS=""; LIBDIRSUFFIX=""; CHOST="i686"
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"; SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"; CHOST="x86_64"
fi

# Now let's build banshee:

SOURCE="http://ftp.gnome.org/pub/GNOME/sources/banshee/2.6/$PKGNAME-$VERSION.tar.xz"

# Download source tarball if still not present
if [ ! -e $CWD/$PKGNAME-$VERSION.tar.xz ]; then
  wget -c $SOURCE
fi

# Create building directory
mkdir -p $TMP $PKG $OUTPUT

cd $TMP
tar -Jxf $CWD/$PKGNAME-$VERSION.tar.xz

echo -e "\E[0;32m+--------------------------+\E[0;0m"
echo -e "\E[0;32m| Start SlackBuild Banshee |\E[0;0m"
echo -e "\E[0;32m+--------------------------+\E[0;0m"

# Adjust permissions and ownerships
cd $PKGNAME-$VERSION
chmod -R u+w,go+r-w,a-s .
chown -R root:root .

# Backport gstreamer1.0 backend
# If you do this, banshee devs will get really mad at you
#
# https://git.gnome.org/browse/banshee/commit/?id=e40923df1bc55129832dff5ca2c782f5040b412f
patch -p1 < $CWD/patches/1-gstreamer-initial.patch
# https://git.gnome.org/browse/banshee/commit/?id=fc80163371e9d7f141767f766a5826713838f163
patch -p1 < $CWD/patches/2-remove-gapless.patch
# https://git.gnome.org/browse/banshee/commit/?id=636980d6d26eb20db4ddc41c36acb5930835e828
patch -p1 < $CWD/patches/3-decodebin.patch
# https://git.gnome.org/browse/banshee/commit/?id=c6ea982e65e19fec7c5eb020cafa99f7278daa15
patch -p1 < $CWD/patches/4-gstwav.patch
# Build 7
# https://git.gnome.org/browse/banshee/commit/?id=bb9b6b9d8da756945e278511139982df437606b0
patch -p1 < $CWD/patches/5-nullcheck.patch
# https://git.gnome.org/browse/banshee/commit/?id=ea128c28c2fc167039cfbe1a8ae489c55fa55c0e
patch -p1 < $CWD/patches/6-gstleftover.patch

# Building Banshee package
LDFLAGS="$SLKLDFLAGS" \
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
#use dmcs to target .NET 4.0 now
#add /opt to path for gstreamer1.0 and the old (fast) sqlite
export PKG_CONFIG_PATH=/opt/gstreamer1-banshee/usr/lib64/pkgconfig:/opt/sqlite-banshee/usr/lib64/pkgconfig
./autogen.sh MCS=/usr/bin/dmcs \
		--prefix=/usr \
		--sysconfdir=/etc \
		--localstatedir=/var \
		--libdir=/usr/lib${LIBDIRSUFFIX} \
		--mandir=/usr/man \
		--infodir=/usr/info \
		--enable-release \
		--enable-gapless-playback=no \
		--disable-youtube \
		--with-vendor-build-id=www.schmatzler.de \
		--disable-gnome \
		--program-prefix= \
		--program-suffix= \
		--build=$CHOST-slackware-linux
echo -e "\E[0;32mPress any key to build the package!\E[0;0m"
read
make -j2
make install DESTDIR=$PKG

# Changing the rpath doesn't work in the usual way, so we'll just put the path into the startup script
if [ "$ARCH" = "x86_64" ]; then
sed -i '10 s/LD_LIBRARY_PATH=\/usr\/lib64\/banshee:/LD_LIBRARY_PATH=\/opt\/gstreamer1-banshee\/usr\/lib64:\/usr\/lib64\/banshee:/g' $PKG/usr/bin/banshee
else
sed -i '10 s/LD_LIBRARY_PATH=\/usr\/lib\/banshee:/LD_LIBRARY_PATH=\/opt\/gstreamer1-banshee\/usr\/lib:\/usr\/lib\/banshee:/g' $PKG/usr/bin/banshee
fi

# Strip binaries and shared objects, if present
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs -r strip --strip-unneeded 2> /dev/null || true
)

#Add documentation files: readme, changelog and so on
mkdir -p $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild
cp -a \
 AUTHORS COPYING ChangeLog HACKING NEWS README \
  $PKG/usr/doc/$PKGNAME-$VERSION
chmod 644 $PKG/usr/doc/$PKGNAME-$VERSION/*

# Also add the slack-desk file and this slackbuild to the package
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
cat $CWD/slack-desc > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/slack-desc
cat $CWD/$PKGNAME.SlackBuild > $PKG/usr/doc/$PKGNAME-$VERSION/SlackBuild/$PKGNAME.SlackBuild

# Building some post-install execution script 	
	echo "if [ -x /usr/bin/update-mime-database ]; then
  /usr/bin/update-mime-database /usr/share/mime &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/update-desktop-database ]; then
  /usr/bin/update-desktop-database &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh
	echo "if [ -x /usr/bin/gtk-update-icon-cache ]; then
  /usr/bin/gtk-update-icon-cache  -f -q /usr/share/icons/hicolor &> /dev/null
fi" >> $PKG/install/doinst.sh
	echo "" >> $PKG/install/doinst.sh

# Change to output directory
cd $PKG
chown -R root:root $PKG

# Create txz package
/sbin/makepkg -l y -c n $OUTPUT/$PKGNAME-$VERSION-$ARCH-$BUILD$TAG.${PKGTYPE:-txz}


# Cleanup if enabled
if [ "$1" = "--cleanup" ]; then
 rm -rf $TMP
fi
