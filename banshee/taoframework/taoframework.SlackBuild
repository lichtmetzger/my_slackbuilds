#!/bin/sh
# Generated by Alien's SlackBuild Toolkit: http://slackware.com/~alien/AST
# Copyright 2009, 2010, 2011, 2012  Eric Hameleers, Eindhoven, Netherlands

# Slackware build script for taoframework

# Written by Ronny Schmatzler <schmatzler@hirnschwund.net>

# Based on http://slackbuilds.org/template.SlackBuild

# (add license information here if you desire; otherwise,
# all submissions are considered to be in the public domain)
# Some licenses may incorporate the "Written by" information
# above, and if so, that line can be omitted
# We strongly suggest *not* using GPL for scripts, as it requires
# a copy of the GPL to be distributed with it.  Since the GPL
# itself is longer than any build script will be, this just doesn't
# make good sense...

PRGNAM=taoframework	# replace with name of program
VERSION=${VERSION:-2.1.0}
BUILD=${BUILD:-2}
TAG=${TAG:-_banpack}	# "_SBo" is required for submission to slackbuilds.org

# Automatically determine the architecture we're building on:
if [ -z "$ARCH" ]; then
  case "$( uname -m )" in
    i?86) export ARCH=i486 ;;
    arm*) export ARCH=arm ;;
    # Unless $ARCH is already set, use uname -m for all other archs:
       *) export ARCH=$( uname -m ) ;;
  esac
fi

CWD=$(pwd)
TMP=${TMP:-/tmp/SBo}	# For consistency's sake, use this
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}	# Drop the package in /tmp

if [ "$ARCH" = "i486" ]; then
  SLKCFLAGS="-O2 -march=i486 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "i686" ]; then
  SLKCFLAGS="-O2 -march=i686 -mtune=i686"
  LIBDIRSUFFIX=""
elif [ "$ARCH" = "x86_64" ]; then
  SLKCFLAGS="-O2 -fPIC"
  LIBDIRSUFFIX=""
else
  SLKCFLAGS="-O2"
  LIBDIRSUFFIX=""
fi

set -e # Exit on most errors
# If you prefer to do selective error checking with
#   command || exit 1
# then that's also acceptable.

rm -rf $PKG
mkdir -p $TMP $PKG $OUTPUT
cd $TMP
rm -rf $PRGNAM-$VERSION
tar xvf $CWD/$PRGNAM-$VERSION.tar.gz
cd $PRGNAM-$VERSION
chown -R root:root .
find . \
 \( -perm 777 -o -perm 775 -o -perm 711 -o -perm 555 -o -perm 511 \) \
 -exec chmod 755 {} \; -o \
 \( -perm 666 -o -perm 664 -o -perm 600 -o -perm 444 -o -perm 440 -o -perm 400 \) \
 -exec chmod 644 {} \;

# use fixes from archlinux
cd source
  sed -i 's/for v in 11 10 9 8 7 6 5; do/for v in 15 14 13 12 11 10 9 8 7 6 5; do/' bootstrap
  sed -i 's/AC_PATH_PROG(CSC, gmcs, no)/AC_PATH_PROG(CSC, dmcs, no)/' configure.ac
  sed -i 's|monodocer --assembly:$$x/$$x.dll --path:doc/$$x;|monodocer -assembly:$$x/$$x.dll -path:doc/$$x;|' src/Makefile.am
  sed -i 's/SUBDIRS = src tests examples/SUBDIRS = src examples/' Makefile.am
  sed -i 's|libavcodec.so.1d|libavcodec.so.53|
          s|libavformat.so.1d|libavformat.so.53|
          s|libavutil.so.1d|libavutil.so.51|' src/Tao.FFmpeg/Tao.FFmpeg.dll.config
  sed -i 's|liblua5.1.so.0|liblua.so.5.1|' src/Tao.Lua/Tao.Lua.dll.config
  sed -i 's|libode.so.0debian1|libode.so.4|' src/Tao.Ode/Tao.Ode.dll.config
  sed -i 's|libopenal.so.0|libopenal.so.1|' src/Tao.OpenAl/Tao.OpenAl.dll.config
  sed -i 's|libphysfs-1.0.so.0|libphysfs.so.1|' src/Tao.PhysFs/Tao.PhysFs.dll.config
  sed -i 's|libSDL_gfx.so.4|libSDL_gfx.so.15|' src/Tao.Sdl/Tao.Sdl.dll.config
  chmod 755 ./bootstrap

./bootstrap

# Your application will probably need different configure flags;
# these are provided as an example only.
# Be sure to build only shared libraries unless there's some need for
# static.
CFLAGS="$SLKCFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
./configure \
  --prefix=/usr \
  --libdir=/usr/lib${LIBDIRSUFFIX} \
  --sysconfdir=/etc \
  --localstatedir=/var \
  --mandir=/usr/man \
  --docdir=/usr/doc/$PRGNAM-$VERSION \
  --build=$ARCH-slackware-linux

# Compile the application and install it into the $PKG directory
make
make install DESTDIR=$PKG

# Strip binaries and libraries - this can be done with 'make install-strip'
# in many source trees, and that's usually acceptable if so, but if not,
# use this:
find $PKG -print0 | xargs -0 file | grep -e "executable" -e "shared object" \
  | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true


# Copy the slack-desc (and a custom doinst.sh if necessary) into ./install
mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
[ -f $CWD/doinst.sh ] && cat $CWD/doinst.sh > $PKG/install/doinst.sh

#copy .pc files
mkdir -p $PKG/usr/lib64/pkgconfig
cp $PKG/usr/lib/pkgconfig/* $PKG/usr/lib64/pkgconfig/

# Make the package; be sure to leave it in $OUTPUT
# If package symlinks need to be created during install *before*
# your custom contents of doinst.sh runs, then add the -p switch to
# the makepkg command below -- see makepkg(8) for details
cd $PKG
/sbin/makepkg -l y -c n $OUTPUT/$PRGNAM-$VERSION-$ARCH-$BUILD$TAG.txz
